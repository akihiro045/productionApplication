using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Windows.Speech;   //Windowsの音声認識で使用


public class NewBehaviorScript : MonoBehaviour
{

    private KeywordController keyCon;
    private string[][] keywords;
    private string[] mic = new string[2];
    private float vector;
    public GameObject BulletPrefab;
    public GameObject BombPrefab;
    public GameObject[] Player;
    //public PositionMove positionMove;
    public Vector3[] temp=new Vector3[2];//仮
    public Vector3[] oldPosition=new Vector3[2];
    private int loopCount;
    //[SerializeField, Range(1, 8)]
    //private int m_useDisplayCount = 2;

    private void Awake()
    {
        Player = new GameObject[2];
        Player[0] = GameObject.Find("Cube.006");
        Player[1] = GameObject.Find("Cube.007");
        //positionMove = gameObject.AddComponent<PositionMove>();
        foreach (string device in Microphone.devices)
        {
            Debug.Log("Name: " + device);
            mic[loopCount] = device;
            temp[loopCount] = Player[loopCount].transform.position;
            loopCount++;
        }
    }

    // Use this for initialization
    void Start()
    {
        keywords = new string[8][];
        keywords[0] = new string[] { "りんご", "みに","みぎ","みみ","みり","いい" };
        keywords[1] = new string[] { "みかん", "オレンジ", "ひだり" };
        keywords[2] = new string[] { "もも", "ピーチ", "まえ" };
        keywords[3] = new string[] { "いちご", "ストロベリー", "うしろ" };
        keywords[4] = new string[] { "ストップ", "した", "とまれ" };
        keywords[5] = new string[] { "たて", "たつ", "うえ" };
        keywords[6] = new string[] { "ばん", "だん", "ぱん" };
        keywords[7] = new string[] { "ドカン", "ボン", "ドン" };

        keyCon = gameObject.AddComponent<KeywordController>();//keywordControllerのインスタンスを作成
        keyCon.SetKeywords(keywords,true);//KeywordRecognizerにkeywordsを設定する
        StartRecognizing();
    }

    void StartRecognizing()
    {
        keyCon.StartRecognizing(0);//シーン中で音声認識を始めたいときに呼び出す
        keyCon.StartRecognizing(1);
        keyCon.StartRecognizing(2);
        keyCon.StartRecognizing(3);
        keyCon.StartRecognizing(4);
        keyCon.StartRecognizing(5);
        keyCon.StartRecognizing(6);
        keyCon.StartRecognizing(7);
    }
    void StopRecognizing()
    {
        keyCon.StopRecognizing(0);
        keyCon.StopRecognizing(1);
        keyCon.StopRecognizing(2);
        keyCon.StopRecognizing(3);
        keyCon.StopRecognizing(4);
        keyCon.StopRecognizing(5);
        keyCon.StopRecognizing(6);
        keyCon.StopRecognizing(7);
    }
    void KeyBoardController(int i)
    {
        //キーボードデバッグ用
        if (Player[i].transform.position == temp[i])
        {
            if (Input.GetKeyDown(KeyCode.RightArrow))
            {
                keyCon.hasRecognized[0] = true;
            }
            else if (Input.GetKeyDown(KeyCode.LeftArrow))
            {
                keyCon.hasRecognized[1] = true;
            }
            else if (Input.GetKeyDown(KeyCode.UpArrow))
            {
                keyCon.hasRecognized[2] = true;
            }
            else if (Input.GetKeyDown(KeyCode.DownArrow))
            {
                keyCon.hasRecognized[3] = true;
            }
            else if (Input.GetKeyDown(KeyCode.Space))
            {
                keyCon.hasRecognized[4] = true;
            }
            else if (Input.GetKeyDown(KeyCode.G))
            {
                keyCon.hasRecognized[6] = true;
            }
            else if (Input.GetKeyDown(KeyCode.B))
            {
                keyCon.hasRecognized[7] = true;
            }
        }
    }
    void VoiceController(int i)
    {
        //音声
        if (keyCon.hasRecognized[0])//設定したKeywords[0]の単語らが認識されたらtrueになる
        {
            Debug.Log("keyword[0] was recognized");
            Debug.Log(temp[i].z);
            //temp[i] = positionMove.PlayerMove(Player[i].transform.position, 0);
            Debug.Log(temp[i].z);
            //MoveStart();
            Debug.Log(this.transform.position.z);
            keyCon.hasRecognized[0] = false;
        }
        if (keyCon.hasRecognized[1])
        {
            Debug.Log("keyword[1] was recognized");
            //temp[i] = positionMove.PlayerMove(Player[i].transform.position, 1);
            //MoveStart();
            keyCon.hasRecognized[1] = false;
        }
        if (keyCon.hasRecognized[2])//設定したKeywords[0]の単語らが認識されたらtrueになる
        {
            Debug.Log("keyword[2] was recognized");
            Debug.Log(temp[i].x);
            //temp[i] = positionMove.PlayerMove(Player[i].transform.position, 2);
            Debug.Log(temp[i].x);
            //MoveStart();
            Debug.Log(this.transform.position.x);
            keyCon.hasRecognized[2] = false;
        }
        if (keyCon.hasRecognized[3])
        {
            Debug.Log("keyword[3] was recognized");
            //temp[i] = positionMove.PlayerMove(Player[i].transform.position, 3);
            //MoveStart();
            keyCon.hasRecognized[3] = false;
        }
        if (keyCon.hasRecognized[4])
        {
            Debug.Log("keyword[4] was recognized");
            /*vector -= 0.1f;

            if (this.transform.position.y > 0)
            {
                this.transform.position += new Vector3(0, vector, 0);

            }
            if (vector == -0.4f)
            {
                vector = 0;
                keyCon.hasRecognized[4] = false;
            }*/
            keyCon.hasRecognized[0] = false;
            keyCon.hasRecognized[1] = false;
            keyCon.hasRecognized[2] = false;
            keyCon.hasRecognized[3] = false;
            keyCon.hasRecognized[4] = false;
            keyCon.hasRecognized[5] = false;
            keyCon.hasRecognized[6] = false;
            keyCon.hasRecognized[7] = false;
        }
        if (keyCon.hasRecognized[5])
        {
            vector += 0.1f;
            Debug.Log("keyword[5] was recognized");
            if (Player[i].transform.position.y < 0.8f)
            {
                Player[i].transform.position += new Vector3(0, vector, 0);
            }
            if (vector == 0.4f)
            {
                vector = 0;
                keyCon.hasRecognized[5] = false;
            }
        }
        if (keyCon.hasRecognized[6])
        {
            Debug.Log("keyword[6] was recognized");
            GameObject Bullet = Instantiate(BulletPrefab) as GameObject;
            Bullet.transform.position = Player[i].transform.position;
            Bullet.transform.position += new Vector3(1.0f, 0, 0);
            Bullet.GetComponent<BulletController>().Shoot(new Vector3(1000, 0, 0));
            keyCon.hasRecognized[6] = false;
        }
        if (keyCon.hasRecognized[7])
        {
            Debug.Log("keyword[7] was recognized");
            GameObject Bomb = Instantiate(BombPrefab, Player[i].transform.position, Quaternion.identity);
            //Bomb.transform.parent = Player.transform;
            Bomb.transform.position = Player[i].transform.position;
            Bomb.transform.position += new Vector3(1.5f, 0, 0);
            Bomb.GetComponent<BombController>().Throw(new Vector3(300, 300, 0));
            keyCon.hasRecognized[7] = false;
        }
        oldPosition[i] = Player[i].transform.position;
    }

    void PlayerMoving(int i)
    {
        //StopRecognizing();
        Player[i].transform.position = Vector3.MoveTowards(Player[i].transform.position, temp[i], 2.0f*Time.deltaTime);
        //this.transform.position = new Vector3(temp.x, temp.y, temp.z);
        //StartRecognizing();
    }

    // Update is called once per frame
    void Update()
    {
        loopCount = 0;
        foreach (string device in Microphone.devices)
        {
            if (Player[loopCount].transform.position == temp[loopCount])
            {
                KeyBoardController(loopCount);
                VoiceController(loopCount);
            }
            else
            {
                PlayerMoving(loopCount);
            }
            loopCount++;
        }
    }
}